from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text

API_TOKEN = 'TOKEN'

primer = '' # —Å—é–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏–º–µ—Ä

bot = Bot(API_TOKEN)
dp = Dispatcher(bot)

# –∫–Ω–æ–ø–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('1', callback_data='btn 1'), InlineKeyboardButton('2', callback_data='btn 2'),
     InlineKeyboardButton('3', callback_data='btn 3'), InlineKeyboardButton('C', callback_data='iter C')],

    [InlineKeyboardButton('4', callback_data='btn 4'), InlineKeyboardButton('5', callback_data='btn 5'),
     InlineKeyboardButton('6', callback_data='btn 6'), InlineKeyboardButton('*', callback_data='iter *')],

    [InlineKeyboardButton('7', callback_data='btn 7'), InlineKeyboardButton('8', callback_data='btn 8'),
     InlineKeyboardButton('9', callback_data='btn 9'), InlineKeyboardButton(':', callback_data='iter /')],

    [InlineKeyboardButton('-', callback_data='iter -'), InlineKeyboardButton('0', callback_data='btn 0'),
     InlineKeyboardButton('+', callback_data='iter +'), InlineKeyboardButton('.', callback_data='iter .')],

    [InlineKeyboardButton('=', callback_data='iter =')]
])


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    '''–Ω–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤—ã–≤–æ–¥–∏—Ç –ø—É—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏'''
    global primer
    primer = ''

    await message.answer(f'–ü—Ä–∏–º–µ—Ä: {primer.rjust(20, " ") + "üìç"}',
                         reply_markup=ikb)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('btn'))
async def start(callback: types.CallbackQuery):
    '''–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä –≤ –ø—Ä–∏–º–µ—Ä'''
    global primer

    primer += str(callback.data)[-1]

    await callback.message.edit_text(f'–ü—Ä–∏–º–µ—Ä: {primer.ljust(20, " ") + "üìç"}',
                         reply_markup=ikb)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('iter'))
async def start(callback: types.CallbackQuery):
    '''–∏—Ç–µ—Ä–∞—Ü–∏–∏ (+-=*/)'''
    global primer

    if str(callback.data)[-1] == 'C':
        # —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        primer = ''

        await callback.message.edit_text(f'–ü—Ä–∏–º–µ—Ä: {primer.ljust(20, " ") + "üìç"}',
                             reply_markup=ikb)

    elif str(callback.data)[-1] != '=':
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ—Ç
        if len(primer) == 0 and callback.data[-1] == '-':
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∏–Ω—É—Å –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª —ç—Ç–æ -
            primer = '-'

            await callback.message.edit_text(f'–ü—Ä–∏–º–µ—Ä: {primer.ljust(20, " ") + "üìç"}',
                                                         reply_markup=ikb)

        elif len(primer) != 0:
            # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é
            if primer[-1] not in '+-/*.':
                # –µ—Å–ª–∏ –ø–æ—Å–ª–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª –Ω–µ –∏—Ç–µ—Ä–∞—Ü–∏—è –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ—Ä
                primer += str(callback.data)[-1]

                await callback.message.edit_text(f'–ü—Ä–∏–º–µ—Ä: {primer.ljust(20, " ") + "üìç"}',
                                                     reply_markup=ikb)

            elif primer[-1] in '+/*.-' and len(primer) > 1:
                '''–µ—Å–ª–∏ –∂–µ –∏—Ç–µ—Ä–∞—Ü–∏—è —Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω –ª–∏ 
                –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –ø—Ä–∏–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∏–º–≤–æ–ª—É –≤–≤–æ–¥–∏–º–æ–≥–æ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∞'''
                if primer[-1] != str(callback.data)[-1]:
                    primer = primer[:-1] + str(callback.data)[-1]
                    await callback.message.edit_text(f'–ü—Ä–∏–º–µ—Ä: {primer.ljust(20, " ") + "üìç"}',
                                                         reply_markup=ikb)
            elif primer[-1] == '-' and len(primer) > 1:
                '''–µ—Å–ª–∏ –∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –ø—Ä–∏–º–µ—Ä–∞ —ç—Ç–æ –º–∏–Ω—É—Å –∏ –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 1 —Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
                 —Ä–∞–≤–µ–Ω –ª–∏ –ø–æ—Å–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª –ø—Ä–∏–º–µ—Ä–∞ –≤–≤–æ–¥–∏–º–æ–≥–æ —á–∏—Å–ª–∞ –∏ —á—Ç–æ–±—ã –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –±—ã–ª –Ω–µ –∏—Ç–µ—Ä–∞—Ü–∏–µ–π'''
                if primer[-1] != str(callback.data)[-1] and primer[-2] not in '-+/*.':
                    primer = primer[:-1] + str(callback.data)[-1]

                    await callback.message.edit_text(f'–ü—Ä–∏–º–µ—Ä: {primer.ljust(20, " ") + "üìç"}',
                                                         reply_markup=ikb)

    elif str(callback.data)[-1] == '=':
        try:
            await callback.message.edit_text(f'–û—Ç–≤–µ—Ç: {eval(primer).ljust(20, " ") + "üìç"}',
                                 reply_markup=ikb)

            primer = str(eval(primer))
        except Exception:
            await callback.message.edit_text(f'–ü—Ä–∏–º–µ—Ä: "{primer}" –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å!',
                                             reply_markup=ikb)

            primer = ''



if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True)

